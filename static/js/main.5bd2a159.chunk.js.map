{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Form","state","name","number","handleChange","e","field","target","dataset","row","setState","value","handleSubmit","preventDefault","props","onAddContact","this","className","styles","TaskEditor","onSubmit","TaskEditorLabel","TaskEditorInput","type","onChange","data-row","TaskEditorButton","Component","defaultProps","Filter","onChangeFilter","ContactList","contacts","onRemove","TaskList","map","cont","TaskListItem","key","id","TaskListText","TaskListButton","onClick","App","filter","addContact","find","contact","toLowerCase","alert","uuidv4","prevState","removeContact","contactId","changeFilter","getVisibleContacts","includes","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","ContactForm","length","defaultProp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bd2a159.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__olbm9\",\"TaskEditorLabel\":\"ContactForm_TaskEditorLabel__2lFHc\",\"TaskEditorInput\":\"ContactForm_TaskEditorInput__1-DHE\",\"TaskEditorButton\":\"ContactForm_TaskEditorButton__3Fnz_\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass Form extends Component {\r\n    static propTypes = {\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n      handleSubmit: PropTypes.func,\r\n      handleChange: PropTypes.func,\r\n    };\r\n\r\n    static defaultProps = {\r\n      name: '',\r\n      number: ''\r\n    }\r\n\r\n\r\n    state = {\r\n      name: \"\",\r\n      number: \"\",\r\n    };\r\n\r\n//1 ввожу данные в поле инпут и меняю поле name/number в state\r\nhandleChange = e => {\r\n  const field = e.target.dataset.row;\r\n  this.setState({\r\n    [field]: e.target.value, //данные введеные в поле инпут\r\n  });\r\n};\r\n//2при нажатии на кнопку add contact снова меняем state только св-во contacts (массив обьектов {name,id})\r\nhandleSubmit = e => {\r\n  e.preventDefault();\r\n  this.props.onAddContact(this.state.name, this.state.number);\r\n\r\n  this.setState({\r\n    name: \"\",\r\n    number: \"\",\r\n  });\r\n};\r\n   \r\nrender() {\r\n      const { name, number } = this.state;\r\n        return (\r\n        <form className={styles.TaskEditor} onSubmit={this.handleSubmit}>\r\n        <label className={styles.TaskEditorLabel}>\r\n          Name\r\n          <input\r\n            className={styles.TaskEditorInput}\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            data-row=\"name\"\r\n          />\r\n        </label>\r\n        <label className={styles.TaskEditorLabel}>\r\n          Number\r\n          <input\r\n            className={styles.TaskEditorInput}\r\n            type=\"text\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            data-row=\"number\"\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={styles.TaskEditorButton} >\r\n          Add contact\r\n        </button>\r\n      </form>)\r\n\r\n    }\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../ContactForm/ContactForm.module.css';\r\n\r\nexport default function Filter({ value, onChangeFilter }) {\r\nreturn (\r\n    <div>\r\n          <label className={styles.TaskEditorLabel}>\r\n          Find contacts by name \r\n    <input \r\n    className={styles.TaskEditorInput} \r\n    type=\"text\"\r\n    value={value} \r\n    onChange={e => onChangeFilter(e.target.value)} \r\n    data-row=\"filter\" \r\n    />\r\n    </label>\r\n    </div>\r\n);\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({contacts, onRemove}) => {\r\n    return(\r\n<div>\r\n<h2>Contacts</h2>\r\n<ul className={styles.TaskList}>\r\n  {contacts.map(cont => (\r\n    <li className={styles.TaskListItem} key={cont.id}>\r\n      <span className={styles.TaskListText}>{cont.name}: </span>\r\n      <span className={styles.TaskListText}>{cont.number}</span>\r\n      <button type=\"button\" \r\n      className={styles.TaskListButton}\r\n      onClick={() => onRemove(cont.id)}>Delete</button>\r\n    </li>\r\n  ))}\r\n</ul>\r\n</div>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number:PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onRemove: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nexport default class App extends Component {\n  static propTypes = {\n    state: PropTypes.shape({\n      contacts: PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n          number: PropTypes.string.isRequired,\n        }),\n      ),\n      filter: PropTypes.string,\n    }),\n    getVisibleContacts: PropTypes.func,\n    addContact: PropTypes.func,\n    changeFilter: PropTypes.func,\n    removeContact: PropTypes.func,\n  };\n\n  static defaultProp = {\n    filter: \"\",\n  };\n\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`CONTACT ${name} IS ALREADY IN CONTACTS.`);\n    } else if (name === \"\" || number === \"\") {\n      alert(`FOR ADD CONTACT IN PHONEBOOK YOU MUST FILLED ALL FIELDS`);\n    } else {\n      const contact = {\n        id: uuidv4(),\n        name,\n        number,\n      };\n\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    }\n  };\n\n  removeContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n\n  //метод который возвращает новый массив (не мутирует state)\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    const { filter } = this.state;\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n        <Filter value={filter} onChangeFilter={this.changeFilter} />\n        {visibleContacts.length > 0 && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemove={this.removeContact}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1_UTO\",\"TaskListItem\":\"ContactList_TaskListItem__3Ug7_\",\"TaskListText\":\"ContactList_TaskListText__3hwaa\",\"TaskListButton\":\"ContactList_TaskListButton__1toE_\"};"],"sourceRoot":""}